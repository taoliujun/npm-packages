name: check pull request
run-name: 'check pull request #${{ github.event.pull_request.number }}'
on:
    pull_request:
        # TODO remove edited
        types: [opened, edited, synchronize, reopened]
permissions:
    issues: write
    pull-requests: write
jobs:
    # replyChecking:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4
    #         - name: Get date time
    #           id: getDateTime
    #           run: echo "result=$(TZ=Asia/Shanghai date)" >> "$GITHUB_OUTPUT"
    #         - name: Create or update a comment
    #           uses: ./.github/actions/unique-comment
    #           with:
    #               token: ${{ secrets.GITHUB_TOKEN }}
    #               owner: ${{ github.event.repository.owner.login }}
    #               repo: ${{ github.event.repository.name }}
    #               issue_number: ${{ github.event.number }}
    #               uniqueIdentifier: ${{ github.workflow }}
    #               body: |
    #                   **Checking...**

    #                   ---

    #                   Commented by Action **${{github.workflow}}**, last updated on ${{steps.getDateTime.outputs.result}}.

    init:
        runs-on: ubuntu-latest
        outputs:
            upload: ${{ steps.upload.outputs.artifact-id }}
        steps:
            - name: Init repo
              uses: actions/checkout@v4
              with:
                  ref: ${{github.head_ref}}

            - name: Init node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Init pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: Upload initialized repo
              id: upload
              uses: actions/upload-artifact@v4
              with:
                  name: repo
                  path: |
                      ./
                      !./.github
                      !./.git
                  retention-days: 1

    testInit:
        runs-on: ubuntu-latest
        needs: [init]
        steps:
            - name: Download initialized repo
              uses: actions/download-artifact@v4
              with:
                  name: repo
            - name: test init
              run: |
                  echo "git $(git rev-parse --abbrev-ref HEAD)"
                  echo "node $(node -v)"
                  ls -a
            - name: Remove initialized repo
              uses: actions/github-script@v7
              with:
                  script: |
                      console.log('needs', '${{needs.init.outputs.upload}}');
                      await octokit.rest.actions.deleteArtifact({
                          owner: context.repo.owner,
                          repo: context.repo.name,
                          artifact_id: '${{needs.init.outputs.upload}}',
                      });

    # eslint:
    #     runs-on: ubuntu-latest
    #     needs: [init]
    #     outputs:
    #         result: ${{ steps.lint.outputs.result }}
    #     steps:
    #         - id: lint
    #           name: Run eslint
    #           run: |
    #               echo "this is eslint" && echo "result=:white_check_mark: eslint result" >> "$GITHUB_OUTPUT"

    # typescript:
    #     runs-on: ubuntu-latest
    #     needs: [init]
    #     outputs:
    #         result: ${{ steps.lint.outputs.result }}
    #     steps:
    #         - id: lint
    #           name: Run tsc
    #           run: |
    #               echo "this is typescript" && echo "result=:x: typescript result" >> "$GITHUB_OUTPUT"

    # unitTest:
    #     runs-on: ubuntu-latest
    #     needs: [init]
    #     outputs:
    #         result: ${{ steps.lint.outputs.result }}
    #     steps:
    #         - id: lint
    #           name: Run jest
    #           run: |
    #               echo "this is unit test" && echo "result=unit test result" >> "$GITHUB_OUTPUT"

    # replyResult:
    #     runs-on: ubuntu-latest
    #     needs: [eslint, typescript, unitTest]
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4
    #         - name: Get date time
    #           id: getDateTime
    #           run: echo "result=$(TZ=Asia/Shanghai date)" >> "$GITHUB_OUTPUT"
    #         - name: Create or update a comment
    #           uses: ./.github/actions/unique-comment
    #           with:
    #               token: ${{ secrets.GITHUB_TOKEN }}
    #               owner: ${{ github.event.repository.owner.login }}
    #               repo: ${{ github.event.repository.name }}
    #               issue_number: ${{ github.event.number }}
    #               uniqueIdentifier: ${{ github.workflow }}
    #               body: |
    #                   ## Eslint Check Result

    #                   ${{needs.eslint.outputs.result}}

    #                   ## Typescript Check Result

    #                   ${{needs.typescript.outputs.result}}

    #                   ## UnitTest Check Result

    #                   ${{needs.unitTest.outputs.result}}

    #                   ---

    #                   Commented by Action `${{github.workflow}}`, last updated on ${{steps.getDateTime.outputs.result}}.
